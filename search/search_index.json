{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Servidor de Desafios de Design de Software Introdu\u00e7\u00e3o Este servidor tem como funcionalidade o envio das respostas dos desafios da mat\u00e9ria de Design de Software.","title":"Home"},{"location":"#servidor-de-desafios-de-design-de-software","text":"","title":"Servidor de Desafios de Design de Software"},{"location":"#introducao","text":"Este servidor tem como funcionalidade o envio das respostas dos desafios da mat\u00e9ria de Design de Software.","title":"Introdu\u00e7\u00e3o"},{"location":"aluno/","text":"Alunos Introdu\u00e7\u00e3o Configurando o Ambiente Como Acessar o Servidor Como Enviar as Solu\u00e7\u00f5es Corre\u00e7\u00e3o do Desafio Resposta Correta Resposta Errada","title":"Aluno"},{"location":"aluno/#alunos","text":"","title":"Alunos"},{"location":"aluno/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"aluno/#configurando-o-ambiente","text":"","title":"Configurando o Ambiente"},{"location":"aluno/#como-acessar-o-servidor","text":"","title":"Como Acessar o Servidor"},{"location":"aluno/#como-enviar-as-solucoes","text":"","title":"Como Enviar as Solu\u00e7\u00f5es"},{"location":"aluno/#correcao-do-desafio","text":"","title":"Corre\u00e7\u00e3o do Desafio"},{"location":"aluno/#resposta-correta","text":"","title":"Resposta Correta"},{"location":"aluno/#resposta-errada","text":"","title":"Resposta Errada"},{"location":"api/","text":"O servidor de desafios de software \u00e9 composto por tr\u00eas rotas, a principal main , change e logout , que s\u00e3o documentadas a seguir: change () /pass Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por trocar a senha do usu\u00e1rio. Na rota POST, \u00e9 esperado 3 itens no request form: old, new e again. Returns: Type Description <function render_template at 0x7f9af56bc2f0> Renderiza a p\u00e1gina index.html logout () /logout Esta rota apresenta um m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal de forma desautenticada. Returns: Type Description <function render_template at 0x7f9af56bc2f0> Renderiza a p\u00e1gina index.html main () / Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por receber o arquivo do desafio e submet\u00ea-lo aos testes. Como argumento, ambos m\u00e9todos recebem ID index.html, que representa o ID do desafio. Returns: Type Description <function render_template at 0x7f9af56bc2f0> Renderiza a p\u00e1gina index.html em diferentes estados","title":"API"},{"location":"api/#servidor","text":"O servidor de desafios de software \u00e9 composto por tr\u00eas rotas, a principal main , change e logout , que s\u00e3o documentadas a seguir:","title":"servidor"},{"location":"api/#servidor.change","text":"","title":"change()"},{"location":"api/#pass","text":"Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por trocar a senha do usu\u00e1rio. Na rota POST, \u00e9 esperado 3 itens no request form: old, new e again. Returns: Type Description <function render_template at 0x7f9af56bc2f0> Renderiza a p\u00e1gina index.html","title":"/pass"},{"location":"api/#servidor.logout","text":"","title":"logout()"},{"location":"api/#logout","text":"Esta rota apresenta um m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal de forma desautenticada. Returns: Type Description <function render_template at 0x7f9af56bc2f0> Renderiza a p\u00e1gina index.html","title":"/logout"},{"location":"api/#servidor.main","text":"","title":"main()"},{"location":"api/#_1","text":"Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por receber o arquivo do desafio e submet\u00ea-lo aos testes. Como argumento, ambos m\u00e9todos recebem ID index.html, que representa o ID do desafio. Returns: Type Description <function render_template at 0x7f9af56bc2f0> Renderiza a p\u00e1gina index.html em diferentes estados","title":"/"},{"location":"guia_des/","text":"Guia do Desnvolvedor Introdu\u00e7\u00e3o Configura\u00e7\u00e3o do Ambiente Como contribuir","title":"Guia de Desenvolvimento"},{"location":"guia_des/#guia-do-desnvolvedor","text":"","title":"Guia do Desnvolvedor"},{"location":"guia_des/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"guia_des/#configuracao-do-ambiente","text":"","title":"Configura\u00e7\u00e3o do Ambiente"},{"location":"guia_des/#como-contribuir","text":"","title":"Como contribuir"},{"location":"professor/","text":"Professores Introdu\u00e7\u00e3o Configurando o Ambiente O primeiro passo para utilizar o servidor \u00e9 configurar o ambiente. Antes de tudo \u00e9 necess\u00e1rio criar o banco de dados(BD) onde ser\u00e1 armazenado tanto as perguntas dos desafios como os usu\u00e1rios da ferramenta, ou seja, os alunos. Para tanto \u00e9 necess\u00e1rio instalar o gerenciador do BD, sqlite3. Execute o comando abaixo em um novo terminal (Crtl+Shift+T) para instalar o sqlite3. $ pip install pysqlite3 Com o gerenciador instalado o pr\u00f3ximo passo \u00e9 criar o banco de dados utilizando o sqlite3. O comando abaixo permite criar um BD com o nome \"quiz\", este comando deve ser executado na pasta \\src do projeto. $ sqlite3 quiz.db Ao Executar o comando um documento chamado quiz.db ser\u00e1 criado na mesma pasta e o seu terminal dever\u00e1 estardentro do ambiente do sqlite3. Para checar se o banco de dados foi devidamente criado, execute o seguinte comando no sqlite3. sqlite> .database A fun\u00e7\u00e3o deve retornar o caminho at\u00e9 o documento quiz.db . Com isso feito, agora \u00e9 necess\u00e1rio criar as tabelas do projeto. Assim, deve-se executar o seguinte comando: sqlite> .read quiz.sql Ou simplesmente execute o comando abaixo, assim ir\u00e1 criar o banco de dados e redirecionar as tabelas para o mesmo. $ sqlite3 quiz.db < quiz.sql Para checar se as tabelas foram de fato criadas execute o seguinte comando: sqlite> .tables O retorno ser\u00e1 as tabelas do projeto. Neste caso: QUIZ USER USERQUIZ Adicionando os Usu\u00e1rios (Alunos) O primeiro passo \u00e9 criar um documento .csv , na pasta \\src do projeto. O comando abaixo ir\u00e1 criar o documento e abrir para a edi\u00e7\u00e3o no editor nano . $ nano users.csv Adicione os alunos e sua senha separando com v\u00edrgulas: aluno, senha Para salvar o arquivo basta utilizar o comando Gravar (Ctrl+O) e ent\u00e3o fechar o arquivo (Ctrl+X). Com o arquivo editado o pr\u00f3ximo passo \u00e9 adicionar esses novos valores a tabela, ou seja, popular a tabela USER . Para isso basta executar o arquivo python adduser.py . $ python adduser.py N\u00e3o \u00e9 necess\u00e1rio passar o arquivo como argumento, apenas \u00e9 estritamente necess\u00e1rio criar o arquivo com o nome users.csv . Agora o projeto j\u00e1 possui os seus usu\u00e1rios! Adicionando Novos Desafios","title":"Professor"},{"location":"professor/#professores","text":"","title":"Professores"},{"location":"professor/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"professor/#configurando-o-ambiente","text":"O primeiro passo para utilizar o servidor \u00e9 configurar o ambiente. Antes de tudo \u00e9 necess\u00e1rio criar o banco de dados(BD) onde ser\u00e1 armazenado tanto as perguntas dos desafios como os usu\u00e1rios da ferramenta, ou seja, os alunos. Para tanto \u00e9 necess\u00e1rio instalar o gerenciador do BD, sqlite3. Execute o comando abaixo em um novo terminal (Crtl+Shift+T) para instalar o sqlite3. $ pip install pysqlite3 Com o gerenciador instalado o pr\u00f3ximo passo \u00e9 criar o banco de dados utilizando o sqlite3. O comando abaixo permite criar um BD com o nome \"quiz\", este comando deve ser executado na pasta \\src do projeto. $ sqlite3 quiz.db Ao Executar o comando um documento chamado quiz.db ser\u00e1 criado na mesma pasta e o seu terminal dever\u00e1 estardentro do ambiente do sqlite3. Para checar se o banco de dados foi devidamente criado, execute o seguinte comando no sqlite3. sqlite> .database A fun\u00e7\u00e3o deve retornar o caminho at\u00e9 o documento quiz.db . Com isso feito, agora \u00e9 necess\u00e1rio criar as tabelas do projeto. Assim, deve-se executar o seguinte comando: sqlite> .read quiz.sql Ou simplesmente execute o comando abaixo, assim ir\u00e1 criar o banco de dados e redirecionar as tabelas para o mesmo. $ sqlite3 quiz.db < quiz.sql Para checar se as tabelas foram de fato criadas execute o seguinte comando: sqlite> .tables O retorno ser\u00e1 as tabelas do projeto. Neste caso: QUIZ USER USERQUIZ","title":"Configurando o Ambiente"},{"location":"professor/#adicionando-os-usuarios-alunos","text":"O primeiro passo \u00e9 criar um documento .csv , na pasta \\src do projeto. O comando abaixo ir\u00e1 criar o documento e abrir para a edi\u00e7\u00e3o no editor nano . $ nano users.csv Adicione os alunos e sua senha separando com v\u00edrgulas: aluno, senha Para salvar o arquivo basta utilizar o comando Gravar (Ctrl+O) e ent\u00e3o fechar o arquivo (Ctrl+X). Com o arquivo editado o pr\u00f3ximo passo \u00e9 adicionar esses novos valores a tabela, ou seja, popular a tabela USER . Para isso basta executar o arquivo python adduser.py . $ python adduser.py N\u00e3o \u00e9 necess\u00e1rio passar o arquivo como argumento, apenas \u00e9 estritamente necess\u00e1rio criar o arquivo com o nome users.csv . Agora o projeto j\u00e1 possui os seus usu\u00e1rios!","title":"Adicionando os Usu\u00e1rios (Alunos)"},{"location":"professor/#adicionando-novos-desafios","text":"","title":"Adicionando Novos Desafios"}]}