{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Servidor de Desafios de Design de Software Introdu\u00e7\u00e3o Este servidor tem como funcionalidade o envio das respostas dos desafios da mat\u00e9ria de Design de Software.","title":"Home"},{"location":"#servidor-de-desafios-de-design-de-software","text":"","title":"Servidor de Desafios de Design de Software"},{"location":"#introducao","text":"Este servidor tem como funcionalidade o envio das respostas dos desafios da mat\u00e9ria de Design de Software.","title":"Introdu\u00e7\u00e3o"},{"location":"aluno/","text":"Alunos Como acessar o servidor Para acessar a plataforma de desafios de programa\u00e7\u00e3o, o aluno deve primeiramente fazer login. O username \u00e9 o mesmo do Blackboard e a senha \u00e9 igual o usu\u00e1rio. ( username : igord, password : igord) Alterar senha Como a senha \u00e9 fraca, o usu\u00e1rio deve logo em seguida do seu primeiro acesso, alterar a senha. Isso pode ser feito por meio do link [trocar senha] do canto superior esquerdo da p\u00e1gina. Saindo da plataforma Para se desautenticar da plataforma (logout), o usu\u00e1rio pode clicar no bot\u00e3o no canto superior direito do site. Como enviar as solu\u00e7\u00f5es Para enviar solu\u00e7\u00f5es do desafio, o usu\u00e1rio deve clicar no bot\u00e3o Escolher arquivo e carregar UM arquivo .py da sua resposta. A solu\u00e7\u00e3o ser\u00e1 analisada e o resultado ficar\u00e1 apresentado da seguinte maneira: Resposta correta Resposta com erros","title":"Aluno"},{"location":"aluno/#alunos","text":"","title":"Alunos"},{"location":"aluno/#como-acessar-o-servidor","text":"Para acessar a plataforma de desafios de programa\u00e7\u00e3o, o aluno deve primeiramente fazer login. O username \u00e9 o mesmo do Blackboard e a senha \u00e9 igual o usu\u00e1rio. ( username : igord, password : igord)","title":"Como acessar o servidor"},{"location":"aluno/#alterar-senha","text":"Como a senha \u00e9 fraca, o usu\u00e1rio deve logo em seguida do seu primeiro acesso, alterar a senha. Isso pode ser feito por meio do link [trocar senha] do canto superior esquerdo da p\u00e1gina.","title":"Alterar senha"},{"location":"aluno/#saindo-da-plataforma","text":"Para se desautenticar da plataforma (logout), o usu\u00e1rio pode clicar no bot\u00e3o no canto superior direito do site.","title":"Saindo da plataforma"},{"location":"aluno/#como-enviar-as-solucoes","text":"Para enviar solu\u00e7\u00f5es do desafio, o usu\u00e1rio deve clicar no bot\u00e3o Escolher arquivo e carregar UM arquivo .py da sua resposta. A solu\u00e7\u00e3o ser\u00e1 analisada e o resultado ficar\u00e1 apresentado da seguinte maneira:","title":"Como enviar as solu\u00e7\u00f5es"},{"location":"aluno/#resposta-correta","text":"","title":"Resposta correta"},{"location":"aluno/#resposta-com-erros","text":"","title":"Resposta com erros"},{"location":"api/","text":"O servidor de desafios de software \u00e9 composto por tr\u00eas rotas, a principal main , change e logout , que s\u00e3o documentadas a seguir: change () /pass Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por trocar a senha do usu\u00e1rio. Na rota POST, \u00e9 esperado 3 itens no request form: old, new e again. Returns: Type Description <function render_template at 0x7fda84f96e18> Renderiza a p\u00e1gina index.html logout () /logout Esta rota apresenta um m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal de forma desautenticada. Returns: Type Description <function render_template at 0x7fda84f96e18> Renderiza a p\u00e1gina index.html main () / Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por receber o arquivo do desafio e submet\u00ea-lo aos testes. Como argumento, ambos m\u00e9todos recebem ID index.html, que representa o ID do desafio. Returns: Type Description <function render_template at 0x7fda84f96e18> Renderiza a p\u00e1gina index.html em diferentes estados","title":"API"},{"location":"api/#servidor","text":"O servidor de desafios de software \u00e9 composto por tr\u00eas rotas, a principal main , change e logout , que s\u00e3o documentadas a seguir:","title":"servidor"},{"location":"api/#servidor.change","text":"","title":"change()"},{"location":"api/#pass","text":"Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por trocar a senha do usu\u00e1rio. Na rota POST, \u00e9 esperado 3 itens no request form: old, new e again. Returns: Type Description <function render_template at 0x7fda84f96e18> Renderiza a p\u00e1gina index.html","title":"/pass"},{"location":"api/#servidor.logout","text":"","title":"logout()"},{"location":"api/#logout","text":"Esta rota apresenta um m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal de forma desautenticada. Returns: Type Description <function render_template at 0x7fda84f96e18> Renderiza a p\u00e1gina index.html","title":"/logout"},{"location":"api/#servidor.main","text":"","title":"main()"},{"location":"api/#_1","text":"Esta rota apresenta dois m\u00e9todos HTTP. O m\u00e9todo GET \u00e9 respons\u00e1vel por renderizar a p\u00e1gina principal em seus diferentes estados. O m\u00e9todo POST \u00e9 respons\u00e1vel por receber o arquivo do desafio e submet\u00ea-lo aos testes. Como argumento, ambos m\u00e9todos recebem ID index.html, que representa o ID do desafio. Returns: Type Description <function render_template at 0x7fda84f96e18> Renderiza a p\u00e1gina index.html em diferentes estados","title":"/"},{"location":"guia_des/","text":"Guia do Desnvolvedor Configurando o Ambiente O primeiro passo para utilizar o servidor \u00e9 configurar o ambiente. Antes de tudo \u00e9 necess\u00e1rio criar o banco de dados(BD) onde ser\u00e1 armazenado tanto as perguntas dos desafios como os usu\u00e1rios da ferramenta, ou seja, os alunos. Para tanto \u00e9 necess\u00e1rio instalar o gerenciador do BD, sqlite3. Execute o comando abaixo em um novo terminal (Crtl+Shift+T) para instalar o sqlite3. $ pip install pysqlite3 Com o gerenciador instalado o pr\u00f3ximo passo \u00e9 criar o banco de dados utilizando o sqlite3. O comando abaixo permite criar um BD com o nome \"quiz\", este comando deve ser executado na pasta src/ do projeto. $ sqlite3 quiz.db Ao Executar o comando um documento chamado quiz.db ser\u00e1 criado na mesma pasta e o seu terminal dever\u00e1 estardentro do ambiente do sqlite3. Para checar se o banco de dados foi devidamente criado, execute o seguinte comando no sqlite3. sqlite> .database A fun\u00e7\u00e3o deve retornar o caminho at\u00e9 o documento quiz.db . Com isso feito, agora \u00e9 necess\u00e1rio criar as tabelas do projeto. Assim, deve-se executar o seguinte comando: sqlite> .read quiz.sql Ou simplesmente execute o comando abaixo, assim ir\u00e1 criar o banco de dados e redirecionar as tabelas para o mesmo. $ sqlite3 quiz.db < quiz.sql Para checar se as tabelas foram de fato criadas execute o seguinte comando: sqlite> .tables O retorno ser\u00e1 as tabelas do projeto. Neste caso: QUIZ USER USERQUIZ Como executar o programa Com o banco de dados j\u00e1 configurado, o pr\u00f3ximo passo \u00e9 executar o programa. Primeiramente \u00e9 necess\u00e1rio criar um login de administrador, para isso basta olhar o item \"Adiciona Usu\u00e1rio\" do arquivo professor . Para abrir o programa, basta executar o arquivo python servidor.py . $ python servidor.py O programa estar\u00e1 rodando no localhost na porta 8080. Assim, para ver o conte\u00fado da p\u00e1gina \u00e9 necess\u00e1rio abrir um navegador e acessar o seguinte link: http://0.0.0.0:8080/ . Ao entrar na p\u00e1gina ir\u00e1 aparecer um popup onde \u00e9 poss\u00edvel inserir suas informa\u00e7\u00f5es para login e assim acessar o servidor de desafios. Como contribuir Para realizar contribui\u00e7\u00f5es no projeto: Fa\u00e7a um Fork do projeto Crie uma Branch para sua Feature ( git checkout -b feature/<nome_feature> ) Adicione suas mudan\u00e7as ( git add . ) Comite suas mudan\u00e7as ( git commit -m 'Adicionando feature ) Fa\u00e7a o Push da Branch ( git push origin feature/<nome_feature> ) Abra um Pull Request no Github","title":"Guia de Desenvolvimento"},{"location":"guia_des/#guia-do-desnvolvedor","text":"","title":"Guia do Desnvolvedor"},{"location":"guia_des/#configurando-o-ambiente","text":"O primeiro passo para utilizar o servidor \u00e9 configurar o ambiente. Antes de tudo \u00e9 necess\u00e1rio criar o banco de dados(BD) onde ser\u00e1 armazenado tanto as perguntas dos desafios como os usu\u00e1rios da ferramenta, ou seja, os alunos. Para tanto \u00e9 necess\u00e1rio instalar o gerenciador do BD, sqlite3. Execute o comando abaixo em um novo terminal (Crtl+Shift+T) para instalar o sqlite3. $ pip install pysqlite3 Com o gerenciador instalado o pr\u00f3ximo passo \u00e9 criar o banco de dados utilizando o sqlite3. O comando abaixo permite criar um BD com o nome \"quiz\", este comando deve ser executado na pasta src/ do projeto. $ sqlite3 quiz.db Ao Executar o comando um documento chamado quiz.db ser\u00e1 criado na mesma pasta e o seu terminal dever\u00e1 estardentro do ambiente do sqlite3. Para checar se o banco de dados foi devidamente criado, execute o seguinte comando no sqlite3. sqlite> .database A fun\u00e7\u00e3o deve retornar o caminho at\u00e9 o documento quiz.db . Com isso feito, agora \u00e9 necess\u00e1rio criar as tabelas do projeto. Assim, deve-se executar o seguinte comando: sqlite> .read quiz.sql Ou simplesmente execute o comando abaixo, assim ir\u00e1 criar o banco de dados e redirecionar as tabelas para o mesmo. $ sqlite3 quiz.db < quiz.sql Para checar se as tabelas foram de fato criadas execute o seguinte comando: sqlite> .tables O retorno ser\u00e1 as tabelas do projeto. Neste caso: QUIZ USER USERQUIZ","title":"Configurando o Ambiente"},{"location":"guia_des/#como-executar-o-programa","text":"Com o banco de dados j\u00e1 configurado, o pr\u00f3ximo passo \u00e9 executar o programa. Primeiramente \u00e9 necess\u00e1rio criar um login de administrador, para isso basta olhar o item \"Adiciona Usu\u00e1rio\" do arquivo professor . Para abrir o programa, basta executar o arquivo python servidor.py . $ python servidor.py O programa estar\u00e1 rodando no localhost na porta 8080. Assim, para ver o conte\u00fado da p\u00e1gina \u00e9 necess\u00e1rio abrir um navegador e acessar o seguinte link: http://0.0.0.0:8080/ . Ao entrar na p\u00e1gina ir\u00e1 aparecer um popup onde \u00e9 poss\u00edvel inserir suas informa\u00e7\u00f5es para login e assim acessar o servidor de desafios.","title":"Como executar o programa"},{"location":"guia_des/#como-contribuir","text":"Para realizar contribui\u00e7\u00f5es no projeto: Fa\u00e7a um Fork do projeto Crie uma Branch para sua Feature ( git checkout -b feature/<nome_feature> ) Adicione suas mudan\u00e7as ( git add . ) Comite suas mudan\u00e7as ( git commit -m 'Adicionando feature ) Fa\u00e7a o Push da Branch ( git push origin feature/<nome_feature> ) Abra um Pull Request no Github","title":"Como contribuir"},{"location":"professor/","text":"Professores Adicionando os Usu\u00e1rios (Alunos) O primeiro passo \u00e9 criar um documento .csv , na pasta src/ do projeto. O comando abaixo ir\u00e1 criar o documento e abrir para a edi\u00e7\u00e3o no editor nano . $ nano users.csv Para adicionar os usu\u00e1rios \u00e9 necess\u00e1rio escrever o login e o seu tipo sepados por v\u00edrgulas, sendo que este \u00faltimo pode ser admin para administrador ou aluno para os alunos. Cada linha recebe a informa\u00e7\u00e3o de um usu\u00e1rio. Adicione primeiramenta na primeira linha o administrador da p\u00e1gina (admin, admin) e em seguida os alunos. Para salvar o arquivo basta utilizar o comando Gravar (Ctrl+O) e ent\u00e3o fechar o arquivo (Ctrl+X). A senha poder\u00e1 ser alterada posteriormente pelo aluno. Com o arquivo editado o pr\u00f3ximo passo \u00e9 adicionar esses novos valores a tabela, ou seja, popular a tabela USER . Para isso basta executar o arquivo python add_user.py . $ python add_user.py N\u00e3o \u00e9 necess\u00e1rio passar o arquivo como argumento, apenas \u00e9 estritamente necess\u00e1rio criar o arquivo com o nome users.csv . Agora o projeto j\u00e1 possui os seus usu\u00e1rios! Adicionando Novos Desafios Adicionar novos desafios \u00e9 muito parecido com a forma como os usu\u00e1rios s\u00e3o adicionados. Da mesma forma que no caso anterior, \u00e9 necess\u00e1rio criar um arquivo .csv , na pasta src/ do projeto, mas agora, o nome do arquivo ser\u00e1 quiz.csv . $ nano quiz.csv A cada linha ser\u00e1 inserido as informa\u00e7\u00f5es de cada desafio. A estrutura para adiconar um novo desafio \u00e9 (numb, release, expire, problem, tests, results, diagnosis), sendo os seus significados: numb : Numera\u00e7\u00e3o do desafio release : Data de lan\u00e7amento expire : Data de validade problem : Descri\u00e7\u00e3o do desafio test : Poss\u00edveis entradas da fun\u00e7\u00e3o result : Resultados das entradas fornecidas pelo test diagnosis : ? O seu arquivo deve ficar semelhante com a imagem acima. Para enviar os teste para o servidor basta executar o arquivo python add_quiz.py . $ python add_quiz.py Agora o projeto j\u00e1 possui os desafios!","title":"Professor"},{"location":"professor/#professores","text":"","title":"Professores"},{"location":"professor/#adicionando-os-usuarios-alunos","text":"O primeiro passo \u00e9 criar um documento .csv , na pasta src/ do projeto. O comando abaixo ir\u00e1 criar o documento e abrir para a edi\u00e7\u00e3o no editor nano . $ nano users.csv Para adicionar os usu\u00e1rios \u00e9 necess\u00e1rio escrever o login e o seu tipo sepados por v\u00edrgulas, sendo que este \u00faltimo pode ser admin para administrador ou aluno para os alunos. Cada linha recebe a informa\u00e7\u00e3o de um usu\u00e1rio. Adicione primeiramenta na primeira linha o administrador da p\u00e1gina (admin, admin) e em seguida os alunos. Para salvar o arquivo basta utilizar o comando Gravar (Ctrl+O) e ent\u00e3o fechar o arquivo (Ctrl+X). A senha poder\u00e1 ser alterada posteriormente pelo aluno. Com o arquivo editado o pr\u00f3ximo passo \u00e9 adicionar esses novos valores a tabela, ou seja, popular a tabela USER . Para isso basta executar o arquivo python add_user.py . $ python add_user.py N\u00e3o \u00e9 necess\u00e1rio passar o arquivo como argumento, apenas \u00e9 estritamente necess\u00e1rio criar o arquivo com o nome users.csv . Agora o projeto j\u00e1 possui os seus usu\u00e1rios!","title":"Adicionando os Usu\u00e1rios (Alunos)"},{"location":"professor/#adicionando-novos-desafios","text":"Adicionar novos desafios \u00e9 muito parecido com a forma como os usu\u00e1rios s\u00e3o adicionados. Da mesma forma que no caso anterior, \u00e9 necess\u00e1rio criar um arquivo .csv , na pasta src/ do projeto, mas agora, o nome do arquivo ser\u00e1 quiz.csv . $ nano quiz.csv A cada linha ser\u00e1 inserido as informa\u00e7\u00f5es de cada desafio. A estrutura para adiconar um novo desafio \u00e9 (numb, release, expire, problem, tests, results, diagnosis), sendo os seus significados: numb : Numera\u00e7\u00e3o do desafio release : Data de lan\u00e7amento expire : Data de validade problem : Descri\u00e7\u00e3o do desafio test : Poss\u00edveis entradas da fun\u00e7\u00e3o result : Resultados das entradas fornecidas pelo test diagnosis : ? O seu arquivo deve ficar semelhante com a imagem acima. Para enviar os teste para o servidor basta executar o arquivo python add_quiz.py . $ python add_quiz.py Agora o projeto j\u00e1 possui os desafios!","title":"Adicionando Novos Desafios"}]}